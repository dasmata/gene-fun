<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="src/engine/Observable.js" type="text/javascript" ></script>
    <script src="src/engine/Agent.js" type="text/javascript" ></script>
    <script src="src/engine/Genes.js" type="text/javascript" ></script>
    <script src="src/engine/Brain.js" type="text/javascript" ></script>
    <script src="src/engine/Population.js" type="text/javascript" ></script>
    <script src="src/engine/Supervisor.js" type="text/javascript" ></script>

    <script src="src/renderers/MapRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AgentRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AgentDetailsRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/WallRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AreaRenderer.js" type="text/javascript" ></script>

    <script src="src/scope/SpawningBounds.js" type="text/javascript" ></script>
    <script src="src/scope/Vector.js" type="text/javascript" ></script>
    <script src="src/scope/Map.js" type="text/javascript" ></script>


    <script src="src/scope/neurons/GenericNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/VisionNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/seeLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/seeRightNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/seeUpNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/seeDownNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/senseRandomNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/moveRandNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/moveLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/moveRightNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/moveUpNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/moveDownNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/processingNegateNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/processingVoidNeuron.js" type="text/javascript" ></script>
    <script src="src/scope/neurons/neuronPool.js" type="text/javascript" ></script>

    <script src="src/utils.js" type="text/javascript" ></script>

    <style>
        :root {
            --neuron-size: 40px;
        }
        h1,h2,h3,h4 {
            padding: 0;
            margin: 0;
        }
        main {
            display: flex;
            align-items: flex-start;
        }
        .map {
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 1;
            position: absolute;
        }
        .breeding-area{
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 0;
            position: absolute;
        }
        #canvas-wrapper {
            width: calc(256px * (2 + 2));
            position: relative;
        }
        #controls {
            width: calc(256px * (2 + 2));
            padding-left: 5px;
        }
        .brain {
            padding: 10px 0;
        }
        .level {
            width: 500px;
            display: flex;
        }
        .level h4 {
            height: var(--neuron-size);
            padding: 5px;
            line-height: var(--neuron-size);
            width: 100px;
        }
        svg {
            display: block;
            margin-left: 110px;
        }
        .level-neurons {
            width: 390px;
            display: flex;
            justify-content: center;
            position: relative;
        }
        .level-neurons div {
            margin: 0 5px;
            border: 1px solid black;
            border-radius: 50%;
            padding: 5px;
            width: var(--neuron-size);
            height: var(--neuron-size);
            text-align: center;
            line-height: var(--neuron-size);
        }

        .level-neurons .result {
            border-radius: 0;
        }
    </style>
</head>
<body>
<main>
    <section id="canvas-wrapper"></section>
    <section id="controls">
        <span>Gen <span id="gen">0</span></span>
        <button id="killSw">Kill everyone!!</button>
        <button id="start">create</button>
        <button id="play">play</button>
        <button id="pause">pause</button>
        <div style="padding:10px">

        </div>
    </section>
</main>
<template id="agent">
    <div>
        <section id="details-container">
                <h2></h2>
                <div class="brain"></div>
                <div class="genome"></div>
                <button class="clear">clear</button>
                <button class="compute">compute</button>
            </section>
    </div>
</template>
<template id="level">
    <div class="level-row">
        <div class="level">
            <h4 class="layer-title"></h4>
            <div class="level-neurons"></div>
        </div>
        <svg width="390" height="40" id="connections"></svg>
    </div>
</template>

<script>
    // const controlsElement = document.getElementById('controls')
    let agentDetailsRenderer = null;
    const size = {
        width: 256,
        height: 256
    };

    const levels = [
        // lvl 1
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2.5), 0], Object.values(size)),
        //             new Vector([size.width, size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2.5), size.height - (size.height / 2.5)], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height - (size.height / 2.5)], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([size.width / 2.5, 0], Object.values(size)),
        //             new Vector([size.width - (size.width / 2.5), size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height / 2.5], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height - size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - size.width / 2.5, size.height / 2.5], Object.values(size)),
        //             new Vector([size.width, size.height - size.height / 2.5], Object.values(size)),
        //         ],
        //     ]
        // },
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 6, size.height / 6], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 6), 0], Object.values(size)),
        //             new Vector([size.width, size.height / 6], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 6), size.height - (size.height / 6)], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height - (size.height / 6)], Object.values(size)),
        //             new Vector([size.width / 6, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 2
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 2), 0], Object.values(size)),
        //             new Vector([size.width, (size.height / 2) - 20], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2), (size.height / 2) + 20], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 3
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 2), 0], Object.values(size)),
        //             new Vector([size.width, (size.height / 2) - 20], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2), (size.height / 2) + 20], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 4
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 8), 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        //lvl 5
        {
            walls: [
                [new Vector([60,30], Object.values(size)), new Vector([62,120], Object.values(size))],
                [new Vector([60,150], Object.values(size)), new Vector([62,230], Object.values(size))],
                [new Vector([180,80], Object.values(size)), new Vector([182,170], Object.values(size))],
            ],
            breedingAreas: [
                [new Vector([size.width - (size.width / 8), 0], Object.values(size)), new Vector([size.width, size.height], Object.values(size))],
            ],
            spawnAreas: [
                [
                    new Vector([0, 30], Object.values(size)),
                    new Vector([size.width / 8, 120], Object.values(size)),
                ],
                [
                    new Vector([0, 150], Object.values(size)),
                    new Vector([size.width / 8, 230], Object.values(size)),
                ]
            ]
        }
    ]

    const generateAgent = (neuronPool, genomeSize, world) => (parents = []) => {
        const agent = new Agent(
            new Vector([0,0], [world.size.width, world.size.height]),
            neuronPool,
            genomeSize,
            parents,
            function(movements, currentActionValue) {
                return movements.reduce((actionValue, params) => {
                    const [vector, method] = params
                    return actionValue[method](vector);
                }, currentActionValue);
            },
            function (agent) {
                if((
                    agent.actionValue[0] === agent.oldActionValue[0] && agent.actionValue[0] === agent.oldActionValue[0])
                    || (agent.oldActionValue[0] === 0 && agent.oldActionValue[1] === 0)
                ) {
                    return (Math.random() * 2) -1;
                }
                return Math.max(...world.breedingAreas.map(area => {
                    const middle = [...area[1].subtract(area[0])].map((el, idx) => ((el / 2) + area[0][idx]));
                    const distance = [agent.actionValue[0] - middle[0], agent.actionValue[1] - middle[1]];
                    const oldDistance = [agent.oldActionValue[0] - middle[0], agent.oldActionValue[1] - middle[1]];

                    const diffX = distance[0] - oldDistance[0];
                    const diffY = distance[1] - oldDistance[1];
                    return (diffX < 0 ? -1 : (diffX > 0 ? 1 : 0)) + (diffY < 0 ? -1 : (diffY > 0 ? 1 : 0));
                }))
            }
        );
        agent.attach(world);
        return agent;
    }


    class Page {
        killBtn;
        createBtn;
        pauseBtn;
        playBtn;
        controlsElement;
        genMarkerElement;
        generationsNr;

        actions = 1250;
        timePerAction = 22;
        populationSize = 1000;

        map;
        supervisor;

        mapRenderer;
        detailsRenderer;


        constructor(){
            this.createBtn = document.getElementById('start');
            this.killBtn = document.getElementById('killSw');
            this.pauseBtn = document.getElementById('pause');
            this.playBtn = document.getElementById('play');
            this.genMarkerElement = document.getElementById('gen');
            this.controlsElement = document.getElementById('controls')

            this.lifeExpectancy = this.actions * this.timePerAction;
            this.generationsNr = 0;

            this.createClickHandler = this.createClickHandler.bind(this);
            this.playClickHandler = this.playClickHandler.bind(this);
            this.pauseClickHandler = this.pauseClickHandler.bind(this);
            this.killClickHandler = this.killClickHandler.bind(this);

            this.createBtn.addEventListener('click', this.createClickHandler)
        }

        createSupervisor(){
            this.supervisor = new Supervisor(
                this.lifeExpectancy,
                this.timePerAction,
                this.actions,
                this.map.population
            )
            this.supervisor.attach(this);
        }

        createMap() {
            this.map = new Map(
                size,
                levels
            )
            const population = this.populationFactory();
            population.init();
            this.map.setPopulation(population);
        }

        killClickHandler(killEvt){
            if (killEvt) {
                this.supervisor.kill();
                this.generationsNr = 0;
                this.genMarkerElement.textContent = this.generationsNr;
            }
            this.stopRendering();
            this.playBtn.removeEventListener('click', this.playClickHandler);
            this.pauseBtn.removeEventListener('click', this.pauseClickHandler);
            this.createBtn.addEventListener('click', this.createClickHandler);
        }

        playClickHandler(){
            this.supervisor.play()
            this.createBtn.removeEventListener('click', this.createClickHandler);
        }

        pauseClickHandler(){
            this.supervisor.pause();
        }

        createClickHandler(){
            this.createMap();
            this.createSupervisor();
            this.playBtn.addEventListener('click', this.playClickHandler);
            this.pauseBtn.addEventListener('click', this.pauseClickHandler);
            this.killBtn.addEventListener('click', this.killClickHandler);
            this.createBtn.removeEventListener('click', this.createClickHandler);
            this.startRendering();
        }

        agentClickHandler(e){
            this.detailsRenderer.render(e.payload.agent);
        }

        update(e){
            switch(e.type){
                case 'armageddon':
                    this.handleArmageddon(e);
                    break;
                case 'agentClick':
                    this.agentClickHandler(e);
            }
        }

        handleArmageddon(){
            const [replicators, agentsPerArea] = this.map.findAllAgents();
            console.log(agentsPerArea);
            const newAgents = this.populationFactory();
            if(replicators.size >= (this.map.population.populationSize / 1)) {
                this.map.nextLevel();
            } else {
                this.genMarkerElement.textContent = ++this.generationsNr;
            }
            if (replicators.size > 0) {
                replicators.replicate(this.map.population.populationSize, newAgents);
            } else {
                newAgents.init();
            }
            this.supervisor.setAgents(newAgents)
            this.map.setPopulation(newAgents);
            this.stopRendering();
            this.startRendering();
            this.supervisor.play();
        }

        startRendering = () => {
            this.detailsRenderer = this.detailsRenderer || new AgentDetailsRenderer(this.controlsElement, this.supervisor);
            this.mapRenderer = this.mapRenderer || new MapRenderer(this.map);

            this.map.placeAgentsOnMap();

            this.mapRenderer.attach(this);
            this.mapRenderer.render();

            this.detailsRenderer.render([...this.map.population][~~(Math.random() * this.map.population.size - 1)]);
        }

        stopRendering(){
            this.mapRenderer.detach(this);
            this.mapRenderer.clear();
            this.detailsRenderer.clear();
        }

        populationFactory = () => {
            return new Population(
                this.map,
                this.populationSize,
                generateAgent(
                    neuronPool(this.map),
                    12,
                    this.map
                )
            );
        }
    }

    const page = new Page();
</script>
</body>
</html>