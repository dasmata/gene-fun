<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="src/Observable.js" type="text/javascript" ></script>
    <script src="src/Vector.js" type="text/javascript" ></script>
    <script src="src/Agent.js" type="text/javascript" ></script>
    <script src="src/Genes.js" type="text/javascript" ></script>
    <script src="src/Population.js" type="text/javascript" ></script>
    <script src="src/World.js" type="text/javascript" ></script>
    <script src="src/Brain.js" type="text/javascript" ></script>
    <script src="src/renderers/WorldRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AgentRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AgentDetailsRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/WallRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AreaRenderer.js" type="text/javascript" ></script>
    <script src="src/neurons/GenericNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/VisionNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/seeLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/seeRightNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/seeUpNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/seeDownNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/senseRandomNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/moveRandNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/moveLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/moveRightNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/moveUpNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/moveDownNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/processingNegateNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/processingVoidNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/neuronPool.js" type="text/javascript" ></script>
    <style>
        :root {
            --neuron-size: 40px;
        }
        h1,h2,h3,h4 {
            padding: 0;
            margin: 0;
        }
        main {
            display: flex;
            align-items: flex-start;
        }
        .world {
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 1;
            position: absolute;
        }
        .breeding-area{
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 0;
            position: absolute;
        }
        #canvas-wrapper {
            width: calc(256px * (2 + 2));
            position: relative;
        }
        #controls {
            width: calc(256px * (2 + 2));
            padding-left: 5px;
        }
        .brain {
            padding: 10px 0;
        }
        .level {
            width: 500px;
            display: flex;
        }
        .level h4 {
            height: var(--neuron-size);
            padding: 5px;
            line-height: var(--neuron-size);
            width: 100px;
        }
        svg {
            display: block;
            margin-left: 110px;
        }
        .level-neurons {
            width: 390px;
            display: flex;
            justify-content: center;
            position: relative;
        }
        .level-neurons div {
            margin: 0 5px;
            border: 1px solid black;
            border-radius: 50%;
            padding: 5px;
            width: var(--neuron-size);
            height: var(--neuron-size);
            text-align: center;
            line-height: var(--neuron-size);
        }

        .level-neurons .result {
            border-radius: 0;
        }
    </style>
</head>
<body>
<main>
    <section id="canvas-wrapper"></section>
    <section id="controls">
        <span>Gen <span id="gen">0</span></span>
        <button id="killSw">Kill everyone!!</button>
        <button id="start">create</button>
        <button id="play">play</button>
        <button id="pause">pause</button>
        <div style="padding:10px">

        </div>
    </section>
</main>
<template id="agent">
    <div>
        <section id="details-container">
                <h2></h2>
                <div class="brain"></div>
                <div class="genome"></div>
                <button class="clear">clear</button>
                <button class="compute">compute</button>
            </section>
    </div>
</template>
<template id="level">
    <div class="level-row">
        <div class="level">
            <h4 class="layer-title"></h4>
            <div class="level-neurons"></div>
        </div>
        <svg width="390" height="40" id="connections"></svg>
    </div>
</template>

<script>
    const controlsElement = document.getElementById('controls')
    let agentDetailsRenderer = null;
    const size = {
        width: 256,
        height: 256
    };

    const levels = [
        // lvl 1
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2.5), 0], Object.values(size)),
        //             new Vector([size.width, size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2.5), size.height - (size.height / 2.5)], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height - (size.height / 2.5)], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([size.width / 2.5, 0], Object.values(size)),
        //             new Vector([size.width - (size.width / 2.5), size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height / 2.5], Object.values(size)),
        //             new Vector([size.width / 2.5, size.height - size.height / 2.5], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - size.width / 2.5, size.height / 2.5], Object.values(size)),
        //             new Vector([size.width, size.height - size.height / 2.5], Object.values(size)),
        //         ],
        //     ]
        // },
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 6, size.height / 6], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 6), 0], Object.values(size)),
        //             new Vector([size.width, size.height / 6], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 6), size.height - (size.height / 6)], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //         [
        //             new Vector([0, size.height - (size.height / 6)], Object.values(size)),
        //             new Vector([size.width / 6, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 2
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 2), 0], Object.values(size)),
        //             new Vector([size.width, (size.height / 2) - 20], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2), (size.height / 2) + 20], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 3
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 2), 0], Object.values(size)),
        //             new Vector([size.width, (size.height / 2) - 20], Object.values(size)),
        //         ],
        //         [
        //             new Vector([size.width - (size.width / 2), (size.height / 2) + 20], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        // lvl 4
        // {
        //     walls: [],
        //     breedingAreas: [
        //         [
        //             new Vector([size.width - (size.width / 8), 0], Object.values(size)),
        //             new Vector([size.width, size.height], Object.values(size)),
        //         ],
        //     ],
        //     spawnAreas: [
        //         [
        //             new Vector([0, 0], Object.values(size)),
        //             new Vector([size.width / 2, size.height], Object.values(size)),
        //         ]
        //     ]
        // },
        //lvl 5
        {
            walls: [
                [new Vector([60,30], Object.values(size)), new Vector([62,120], Object.values(size))],
                [new Vector([60,150], Object.values(size)), new Vector([62,230], Object.values(size))],
                [new Vector([180,80], Object.values(size)), new Vector([182,170], Object.values(size))],
            ],
            breedingAreas: [
                [new Vector([size.width - (size.width / 8), 0], Object.values(size)), new Vector([size.width, size.height], Object.values(size))],
            ],
            spawnAreas: [
                [
                    new Vector([0, 30], Object.values(size)),
                    new Vector([size.width / 8, 120], Object.values(size)),
                ],
                [
                    new Vector([0, 150], Object.values(size)),
                    new Vector([size.width / 8, 230], Object.values(size)),
                ]
            ]
        }
    ]

    const generateAgent = (neuronPool, genomeSize, world) => (parents = []) => {
        const agent = new Agent(
            new Vector([0,0], [world.size.width, world.size.height]),
            neuronPool,
            genomeSize,
            parents,
            function (agent) {
                if((
                    agent.posVector[0] === agent.oldPosVector[0] && agent.posVector[0] === agent.oldPosVector[0])
                    || (agent.oldPosVector[0] === 0 && agent.oldPosVector[1] === 0)
                ) {
                    return (Math.random() * 2) -1;
                }
                return Math.max(...world.breedingAreas.map(area => {
                    const middle = [...area[1].subtract(area[0])].map((el, idx) => ((el / 2) + area[0][idx]));
                    const distance = [agent.posVector[0] - middle[0], agent.posVector[1] - middle[1]];
                    const oldDistance = [agent.oldPosVector[0] - middle[0], agent.oldPosVector[1] - middle[1]];

                    const diffX = distance[0] - oldDistance[0];
                    const diffY = distance[1] - oldDistance[1];
                    return (diffX < 0 ? -1 : (diffX > 0 ? 1 : 0)) + (diffY < 0 ? -1 : (diffY > 0 ? 1 : 0));
                }))
            }
        );
        agent.attach(world);
        return agent;
    }

    const populationFactory = (world, size = 1000) => {
        return new Population(
            world,
            size,
            generateAgent(
                neuronPool(world),
                12,
                world
            )
        );
    }

    const letThereBeLight = (observers) => {
        const world = new World(
            size,
            15000,
            32,
            levels,
            populationFactory
        )
        observers.forEach(obj => world.attach(obj));
        agentDetailsRenderer = new AgentDetailsRenderer(controlsElement, world);
        return world;
    }

    startRendering = (world, observers = []) => {
        const renderer = new WorldRenderer(world);
        observers.forEach(obs => renderer.attach(obs))
        renderer.render();
        agentDetailsRenderer.render([...world.agents][~~(Math.random() * world.agents.size - 1)]);
        return [ renderer, () => {
            observers.forEach(obs => renderer.detach(obs))
            renderer.clear();
            agentDetailsRenderer.clear();
        } ];
    }

    let killSwitch = () => {};
    let generations = 0;
    const genMarker = document.getElementById('gen')
    const create = e => {
        let destroyRenderer;
        const world = letThereBeLight([
            {update: e => {
                if (e.type === 'levelUp')  {
                    if (destroyRenderer){
                        destroyRenderer();
                    }
                    [, destroyRenderer] = startRendering(world, [clickObserver]);
                }
            }}
        ]);

        const clickObserver = { update: (e) => {
            if (e.type !== 'click') {
                return
            }
            agentDetailsRenderer.render(e.payload.agent);
        }}



        const run = () => {
            [, destroyRenderer] = startRendering(world, [clickObserver]);
            killSwitch = killEvt => {
                if (killEvt) {
                    world.kill();
                    generations = 0;
                    genMarker.textContent = generations;
                }
                destroyRenderer();
                document.getElementById('play').removeEventListener('click', play)
                document.getElementById('pause').removeEventListener('click', pause)
                e.target.addEventListener('click', create)
            }
            const play = () => world.play()
            const pause = () => world.pause()
            document.getElementById('play').addEventListener('click', play)
            document.getElementById('pause').addEventListener('click', pause)
            e.target.removeEventListener('click', create)
        }
        world.attach({
            update: (e) => {
                if(e.type !== 'armageddon'){
                    return;
                }
                genMarker.textContent = ++generations;
                killSwitch();
                run();
            }
        })
        run()
    }


    document.getElementById('start').addEventListener('click', create)
    document.getElementById("killSw").addEventListener('click', (e) => {
        killSwitch(e)
    })

</script>
</body>
</html>