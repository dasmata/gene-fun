<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="src/Vector.js" type="text/javascript" ></script>
    <script src="src/Agent.js" type="text/javascript" ></script>
    <script src="src/Genes.js" type="text/javascript" ></script>
    <script src="src/Population.js" type="text/javascript" ></script>
    <script src="src/World.js" type="text/javascript" ></script>
    <script src="src/renderers/WorldRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AgentRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/WallRenderer.js" type="text/javascript" ></script>
    <script src="src/renderers/AreaRenderer.js" type="text/javascript" ></script>
    <script src="src/neurons/weightModifier.js" type="text/javascript" ></script>
    <script src="src/neurons/SeeLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/SeeRightNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/SeeUpNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/SeeDownNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/MoveRandNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/MoveLeftNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/MoveRightNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/MoveUpNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/MoveDownNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/NegateNeuron.js" type="text/javascript" ></script>
    <script src="src/neurons/neuronPool.js" type="text/javascript" ></script>
    <style>
        main {
            display: flex;
            align-items: flex-start;
        }
        .world {
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 1;
            position: absolute;
        }
        .breeding-area{
            width: calc(256px * (2 + 2));
            border: 1px solid black;
            z-index: 0;
            position: absolute;
        }
        #canvas-wrapper {
            width: calc(256px * (2 + 2));
            position: relative;
        }
        #controls {
            width: calc(256px * (2 + 2));
            padding-left: 5px;
        }
    </style>
</head>
<body>
<main>
    <section id="canvas-wrapper"></section>
    <section id="controls">
        <span>Gen <span id="gen">0</span></span>
        <button id="killSw">Kill everyone!!</button>
        <button id="start">create</button>
        <button id="play">play</button>
        <button id="pause">pause</button>
    </section>
</main>
<template id="agent">
    <div>
        <section id="details-container">
            <h2></h2>
            <div class="brain"></div>
            <div class="genome"></div>
            <button>run</button>
        </section>
    </div>
</template>
<template id="neuron">
    <div>
        <div id="neuron-container">
        </div>
    </div>
</template>

<script>
    let currentDetails = null
    renderAgentDetails = (agent) => {
        if (currentDetails) {
            document.getElementById('controls').removeChild(currentDetails);
        }
        const tree = document.getElementById('agent').content.cloneNode(true)
        tree.querySelector('h2').textContent = Symbol.keyFor(agent.id)
        tree.querySelector('button').addEventListener('click', () => {
            console.log(agent.visualizeNeurons())
        })
        const ntpl = document.getElementById('neuron');
        const brain = tree.querySelector('.brain');
        agent.brain.forEach(conn => {
            const ntree = ntpl.content.cloneNode(true);
            const node = ntree.querySelector('#neuron-container');
            node.textContent = Symbol.keyFor(conn[0]);
            brain.appendChild(node);
        })
        currentDetails = tree.querySelector('#details-container');
        document.getElementById('controls').appendChild(currentDetails);
    }
    const clickObserver = (e) => {
        if (e.type != 'click') {
            return
        }
        renderAgentDetails(e.payload)
    }

    const size = {
        width: 256,
        height: 256
    };

    const getWalls = () => [
        [new Vector([60,30], Object.values(size)), new Vector([69,120], Object.values(size))],
        [new Vector([60,150], Object.values(size)), new Vector([69,230], Object.values(size))],
        [new Vector([180,80], Object.values(size)), new Vector([189,160], Object.values(size))],
    ]

    const getBreedingAreas = () => [
        [
            new Vector([
                size.width - (size.width / 8),
                0
            ], Object.values(size)),
            new Vector([
                size.width,
                size.height
            ], Object.values(size)),
        ],
    ]

    const getSpawnAreas = () => [
        // [
        //     new Vector([0, 0], Object.values(size)),
        //     new Vector([256, 256], Object.values(size)),
        // ],
        [
            new Vector([0, 30], Object.values(size)),
            new Vector([size.width / 8, 120], Object.values(size)),
        ],
        //
        [
            new Vector([0, 150], Object.values(size)),
            new Vector([size.width / 8, 230], Object.values(size)),
        ]
    ]

    const letThereBeLight = () => {

        return new World(
            size,
            1000,
            10000,
            16,
            getBreedingAreas(),
            getSpawnAreas(),
            getWalls()
        )
    }

    let killSwitch = () => {};
    let generations = 0;
    const genMarker = document.getElementById('gen')
    const start = e => {
        const world = letThereBeLight();
        const run = () => {
            const renderer = new WorldRenderer(world);
            killSwitch = killEvt => {
                if (killEvt) {
                    world.kill();
                    generations = 0;
                    genMarker.textContent = generations;
                }
                renderer.clear();
                document.getElementById('play').removeEventListener('click', play)
                document.getElementById('pause').removeEventListener('click', pause)
                e.target.addEventListener('click', start)
            }
            renderer.attach(clickObserver)
            const play = () => world.play()
            const pause = () => world.pause()
            document.getElementById('play').addEventListener('click', play)
            document.getElementById('pause').addEventListener('click', pause)
            e.target.removeEventListener('click', start)
            renderer.render()
        }
        world.attach({
            update: (e) => {
                genMarker.textContent = ++generations;
                killSwitch();
                run();
            }
        })

        run()
    }

    document.getElementById('start').addEventListener('click', start)
    document.getElementById("killSw").addEventListener('click', (e) => {
        killSwitch(e)
    })

</script>
</body>
</html>